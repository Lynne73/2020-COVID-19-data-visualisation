// date in data
var keys = ["1/22/20","1/23/20","1/24/20","1/25/20","1/26/20","1/27/20","1/28/20","1/29/20","1/30/20","1/31/20","2/1/20","2/2/20","2/3/20","2/4/20","2/5/20","2/6/20","2/7/20","2/8/20","2/9/20","2/10/20","2/11/20","2/12/20","2/13/20","2/14/20","2/15/20","2/16/20","2/17/20","2/18/20","2/19/20","2/20/20","2/21/20","2/22/20","2/23/20","2/24/20","2/25/20","2/26/20","2/27/20","2/28/20","2/29/20","3/1/20","3/2/20","3/3/20","3/4/20","3/5/20","3/6/20","3/7/20","3/8/20","3/9/20","3/10/20","3/11/20","3/12/20","3/13/20","3/14/20","3/15/20","3/16/20","3/17/20","3/18/20","3/19/20","3/20/20","3/21/20","3/22/20","3/23/20","3/24/20","3/25/20","3/26/20","3/27/20","3/28/20","3/29/20","3/30/20","3/31/20","4/1/20","4/2/20","4/3/20","4/4/20","4/5/20","4/6/20","4/7/20","4/8/20","4/9/20","4/10/20","4/11/20","4/12/20","4/13/20","4/14/20","4/15/20","4/16/20","4/17/20","4/18/20","4/19/20","4/20/20","4/21/20","4/22/20","4/23/20","4/24/20","4/25/20","4/26/20","4/27/20","4/28/20","4/29/20","4/30/20","5/1/20","5/2/20","5/3/20","5/4/20","5/5/20","5/6/20","5/7/20","5/8/20","5/9/20","5/10/20","5/11/20","5/12/20","5/13/20","5/14/20","5/15/20","5/16/20","5/17/20","5/18/20","5/19/20","5/20/20","5/21/20","5/22/20","5/23/20","5/24/20","5/25/20","5/26/20","5/27/20","5/28/20","5/29/20","5/30/20","5/31/20","6/1/20","6/2/20","6/3/20","6/4/20","6/5/20","6/6/20","6/7/20"]
var tooltip = d3.select("body").append("div").attr("class", "flowpop").style("position", "absolute").style("text-align", "center").style("visibility", "hidden")
var margin = { top: 20, right: 20, left: 100, bottom: 40}
var width = 1000 - margin.right - margin.left;
var height = 600 - margin.top - margin.bottom;
var svg = d3.select("svg");
var g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
var startbutton = document.getElementById('startanimate');
// define scale
var xScale = d3.scalePow().exponent(0.5).range([0, width]);
var yScale = d3.scaleBand().padding(0.1).range([height, 0]);
// draw first date graph
drawBar(0)
// unit text
svg.append("text")
    .attr("transform", "translate(" + (width/2) + " ," + (height + margin.top + 35) + ")")
    .style("text-anchor", "middle")
    .text("population")

// set time delay for each draw (animation)
function doSetTimeOut(i) {
    setTimeout(function() { drawBar(i) }, i * 100);
}

// start animation function
function startTrans(){
    startbutton.disabled = true
    for (var i = 0; i < keys.length - 1; i++) {
        doSetTimeOut(i)
    }
    // set a time delay for start button
    setTimeout(function() { startbutton.disabled = false}, 136 * 100)
}

// main function draw graph
function drawBar(i) {
    d3.csv("time_series_covid_19_confirmed.csv", function(e, data) {
        // remove all g to draw new 
        g.selectAll("text").remove()
        g.selectAll("g").remove()
        g.selectAll("rect").remove()
        if (e) {
            throw e;
        }
        // sort data (description in function)
        data = sortData(data);
        // descending data for top 15
        data = data.sort(function(a, b) { return d3.descending(parseInt(a[keys[i]]), parseInt(b[keys[i]]))})
        //take first 15 countries
        newdata = data.slice(0, 16);
        newdata = newdata.reverse()
        // get domain for x and y
        yScale.domain(newdata.map(function(d) { return d["Country/Region"]}))
        xScale.domain([0, 2500000])

        // make x axis
        g.append("g").attr("transform", "translate(0," + height + ")").call(d3.axisBottom(xScale));
        // make y axis
        g.append("g").call(d3.axisLeft(yScale))

        // draw number on each bar
        g.selectAll("text.name").data(newdata).enter().append("text")
            // x axis
            .attr("x", function(d) {
                return xScale(d[keys[i]] + 100)
            })
            // y axis
            .attr("y", function(d) {
                return yScale(d["Country/Region"]) + 20
            })
            .attr("text-anchor", "left")
            // text
            .text(function(d) { return d[keys[i]] })

        //append rect
        g.selectAll(".bar").data(newdata)
            .enter().append("rect")
            // width of rect (number)
            .attr("width", function(d) { 
                return x = xScale(d[keys[i]]);
            })
            // y for rect
            .attr("y", function(d) { return yScale(d["Country/Region"]) })
            // height for rect
            .attr("height", yScale.bandwidth())
            // color for rect (generated by country name hash)
            .attr("fill", function(d) {
                return '#' + intToRGB(hashCode(d["Country/Region"]))
            })
            .on("mouseover", function(thisElement) {
                var info = {"country": thisElement["Country/Region"], "number": thisElement[keys[i]]}
                tooltip.html(tooltip_info(info)).style("visibility", "visible")
            })
            .on("mousemove", function(thisElement) {
                return tooltip.style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 10) + "px")
            })
            .on("mouseout", function(thisElement) {
                tooltip.style("visibility", "hidden")
            })
    })
}



function sortData(data) {
    // this function is adding people for same countries (VIC, TAS ... for Australia)
    var newData = []
    var copy = data.slice();
    var newDataSlice = copy[0];
    for (var i = 0; i < data.length - 1; i++) {
        if (newDataSlice["Country/Region"].valueOf() == data[i + 1]["Country/Region"].valueOf()) {
            for (var j = 0; j < keys.length; j++) {
                newDataSlice[keys[j]] = parseInt(newDataSlice[keys[j]]) + parseInt(data[i + 1][keys[j]])
            }
        } else {
            for (var j = 0; j < keys.length; j++) {
                newDataSlice[keys[j]] = parseInt(newDataSlice[keys[j]])
            }
            newData.push(newDataSlice);
            newDataSlice = copy[i + 1];
        }
    }
    return newData
}

// return the information for tooltip
function tooltip_info(d) {
    console.log("tooltip", d);
    return "country: " + d.country + "<br>" + "confirmed: " + d.number 
}


// these 2 functions below will return the color code for a string
function hashCode(str) { // java String#hashCode
    var hash = 0;
    for (var i = 0; i < str.length; i++) {
       hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    return hash;
} 

function intToRGB(i){
    var c = (i & 0x00FFFFFF)
        .toString(16)
        .toUpperCase();

    return "00000".substring(0, 6 - c.length) + c;
}